/*
 * Methods:
 * Promise.race(array) - возвращает первый успешно выполненный или отклонённый промис, со значением или причиной отклонения этого промиса.
 * Promise.all(array) - возвращает промис, который выполнится тогда, когда будут успешно выполнены все промисы, или отклонен любой из них.
 * Promise.allSettled(array) - возвращает промис, который исполняется когда все полученные промисы завершены (успешно выполнены или отклонены), будет содержать массив результатов полученных промисов (status и value для успешных, status и reason для неуспешных)
 * Promise.any(array) - как только один из промисов выполнится успешно, метод возвратит значение выполненного промиса. Если ни один из промисов не завершится успешно, тогда возвращённый Promise будет отклонён
 */

/////////////////////////////////////////////////////////

/*
 * Сделайте 3 промиса - по одному для каждого фреймворка из массива.
 * В каждом расположена функция setTimeout со случайной задержкой от 0 до 2 секунд.
 * Сделать так, чтобы промисы и резолвились, и реджектились случайно.
 * Пусть каждый промис своим результатом возвращает эту задержку и имя фреймворка, а при ошибке еще и текст ошибки 'Promise error'.
 */

// const frameworks = ['React', 'Vue', 'Angular'];

// const getRandomDelay = () => Math.ceil(Math.random() * 2000);

// const isSuccess = Math.random() < 0.7;

//////////////////////////////////////////////////////////////////////

/*
 * С помощью Promise.race дождитесь загрузки первого сработавшего промиса и выведите результат его работы на экран: `🟢 ${Framework_name} won with ${delay} ms`
 * или результат ошибки: `🔴 ${error}! ${name} rejected in ${delay} ms`
 */

//////////////////////////////////////////////////////////////////////

/*
 * С помощью Promise.all получите массив результатов
 * Выведите на экран информацию, с какой задержкой выполнился промис для каждого фреймфорка: `🟢 ${Framework_name} fulfilled in ${delay} ms`
 * Или с какой задержкой зареджектился один из них: `🔴 ${error}! ${Framework_name} rejected in ${delay} ms`
 */

////////////////////////////////////////////

/*
 * С помощью Promise.allSettled получите массив результатов.
 * Выведите на экран информацию, с каким результатом выполнился промис для каждого фреймфорка:
 * `🟢 ${Framework_name} fulfilled in ${delay} ms`
 * `🔴 ${error}! ${Framework_name} rejected in ${delay} ms`
 *
 * Пример ответа:
 *  {status: "fulfilled", value: 99},
 *  {status: "rejected",  reason: Error: an error}
 */

//////////////////////////////////////////////////////////

/*
 * С помощью Promise.any дождитесь загрузки первого успешного промиса и выведите результат его работы на экран: `🟢 ${Framework_name} won with ${delay} ms` или результат ошибки каждого промиса в catch: `🔴 ${error}! ${name} rejected in ${delay} ms`
 * Привер объекта ошибки в catch:
 * {
 *  errors: (3) [{…}, {…}, {…}]
 *  message: "All promises were rejected"
 *  stack: "AggregateError: All promises were rejected"
 * }
 */
